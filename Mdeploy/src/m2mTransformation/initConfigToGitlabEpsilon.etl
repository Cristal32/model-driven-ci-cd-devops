rule ProjectToPipeline
    transform initConfigProject : InitConfig!Project
    to gitlabPipeline : gitlab!Pipeline {
    
    gitlabPipeline.name = initConfigProject.name;

    gitlabPipeline.triggers.add(createPushTrigger(gitlabPipeline));
    gitlabPipeline.stages.add(createCloneStage(initConfigProject));

    // Create the other stages (Build, Test, Deploy) by calling their respective operations
    gitlabPipeline.stages.add(createBuildStage(initConfigProject));
    gitlabPipeline.stages.add(createTestStage(initConfigProject));
    gitlabPipeline.stages.add(createDeployStage(initConfigProject));
    
    // Call the operation to update bidirectional links
    updateBidirectionalLinks(gitlabPipeline);
}

operation createPushTrigger(pipeline : gitlab!Pipeline) : gitlab!Trigger {
    var trigger = new gitlab!Trigger;
    trigger.name = "Push Trigger";
    trigger.condition = "push";
    trigger.pipeline = pipeline;
    return trigger;
}

operation createCloneStage(initConfigProject : InitConfig!Project) : gitlab!Clone {
    var cloneStage = new gitlab!Clone;
    cloneStage.url = initConfigProject.url;
    cloneStage.branch = initConfigProject.branch;
    cloneStage.order = 0;
    cloneStage.script = "git clone " + initConfigProject.url;
    return cloneStage;
}

operation createBuildStage(initConfigProject : InitConfig!Project) : gitlab!Build {
    var gitlabBuild = new gitlab!Build;
    gitlabBuild.script = "build command for " + initConfigProject.name;
    gitlabBuild.order = 1;
    return gitlabBuild;
}

operation createTestStage(initConfigProject : InitConfig!Project) : gitlab!Test {
    var gitlabTest = new gitlab!Test;
    gitlabTest.script = "test command for " + initConfigProject.name;
    gitlabTest.order = 2;
    return gitlabTest;
}

operation createDeployStage(initConfigProject : InitConfig!Project) : gitlab!Deploy {
    var gitlabDeploy = new gitlab!Deploy;
    gitlabDeploy.script = "deploy command for " + initConfigProject.name;
    gitlabDeploy.order = 3;
    return gitlabDeploy;
}

operation updateBidirectionalLinks(pipeline : gitlab!Pipeline) {
    // Assuming Pipeline has a stages property and Stage has a pipeline property
    for (stage in pipeline.stages) {
        stage.pipeline = pipeline;  // Update the reverse link
    }
}
